{"ast":null,"code":"import _regeneratorRuntime from \"/home/dev/youtube_downloader/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/dev/youtube_downloader/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dev/youtube_downloader/pages/index.js\";\nimport axios from 'axios';\nimport { URLSearchParams } from 'url'; // import VideoInfo from './models/VideoInfo';\n\nfunction Home() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      \"for\": \"videoId\",\n      children: \"ID do V\\xEDdeo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"videoId\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return getVideoInfo();\n      },\n      children: \"Informa\\xE7\\xF5es do v\\xEDdeo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Home;\n\nfunction getVideoInfo() {\n  return _getVideoInfo.apply(this, arguments);\n}\n\nfunction _getVideoInfo() {\n  _getVideoInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var videoIdRegex, videoId, eurl, response, parsedResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            videoIdRegex = /^[\\w_-]+$/;\n            videoId = 'EW7m2WIvFgQ';\n            eurl = \"https://youtube.googleapis.com/v/\".concat(videoId);\n\n            if (videoIdRegex.test(videoId)) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('Invalid videoId.');\n\n          case 5:\n            _context.next = 7;\n            return axios.get(\"https://www.youtube.com/get_video_info?video_id=\".concat(videoId, \"&el=embedded&eurl=\").concat(eurl, \"&sts=18333\"));\n\n          case 7:\n            response = _context.sent;\n            parsedResponse = response.data; // const jsonResponse = JSON.parse(parsedResponse.player_response);\n            // const { playabilityStatus, videoDetails, streamingData } = jsonResponse;\n            // const videoInfo = { playabilityStatus, videoDetails, streamingData };\n            // return videoInfo;\n\n            return _context.abrupt(\"return\", '');\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getVideoInfo.apply(this, arguments);\n}\n\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/dev/youtube_downloader/pages/index.js"],"names":["axios","URLSearchParams","Home","getVideoInfo","videoIdRegex","videoId","eurl","test","Error","get","response","parsedResponse","data"],"mappings":";;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,KAAhC,C,CAEA;;AAEA,SAASC,IAAT,GAAgB;AACZ,sBACI;AAAA,4BACI;AAAO,aAAI,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMC,YAAY,EAAlB;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;KARQD,I;;SAUMC,Y;;;;;2EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUC,YAAAA,YAFV,GAEyB,WAFzB;AAGUC,YAAAA,OAHV,GAGoB,aAHpB;AAIUC,YAAAA,IAJV,8CAIqDD,OAJrD;;AAAA,gBAMMD,YAAY,CAACG,IAAb,CAAkBF,OAAlB,CANN;AAAA;AAAA;AAAA;;AAAA,kBAOQ,IAAIG,KAAJ,CAAU,kBAAV,CAPR;;AAAA;AAAA;AAAA,mBAUwBR,KAAK,CAACS,GAAN,2DAA6DJ,OAA7D,+BAAyFC,IAAzF,gBAVxB;;AAAA;AAUOI,YAAAA,QAVP;AAYOC,YAAAA,cAZP,GAYwBD,QAAQ,CAACE,IAZjC,EAcC;AACA;AACA;AAEG;;AAlBJ,6CAmBW,EAnBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAsBA,eAAeV,IAAf","sourcesContent":["\nimport axios from 'axios';\nimport { URLSearchParams } from 'url';\n\n// import VideoInfo from './models/VideoInfo';\n\nfunction Home() {\n    return (\n        <div>\n            <label for=\"videoId\">ID do Vídeo</label>\n            <input type=\"text\" id=\"videoId\"></input>\n            <button onClick={() => getVideoInfo()}>Informações do vídeo</button>\n        </div>\n    );\n}\n\nasync function getVideoInfo() {\n\n    const videoIdRegex = /^[\\w_-]+$/;\n    const videoId = 'EW7m2WIvFgQ';\n    const eurl = `https://youtube.googleapis.com/v/${videoId}`;\n    \n\tif (!videoIdRegex.test(videoId)) {\n\t\tthrow new Error('Invalid videoId.');\n\t}\n\n\tconst response = await axios.get(`https://www.youtube.com/get_video_info?video_id=${videoId}&el=embedded&eurl=${eurl}&sts=18333`);\n\n\tconst parsedResponse = response.data;\n\n\t// const jsonResponse = JSON.parse(parsedResponse.player_response);\n\t// const { playabilityStatus, videoDetails, streamingData } = jsonResponse;\n\t// const videoInfo = { playabilityStatus, videoDetails, streamingData };\n\n    // return videoInfo;\n    return '';\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}