{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dev/youtube_downloader/pages/index.js\";\nimport axios from 'axios';\nimport { URLSearchParams } from 'url'; // import VideoInfo from './models/VideoInfo';\n\nfunction Home() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      for: \"videoId\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"videoId\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\nasync function getVideoInfo(videoId) {\n  const videoIdRegex = /^[\\w_-]+$/;\n  const eurl = `https://youtube.googleapis.com/v/${videoId}`;\n\n  if (!videoIdRegex.test(videoId)) {\n    throw new Error('Invalid videoId.');\n  }\n\n  const response = await axios.get(`https://www.youtube.com/get_video_info?video_id=${videoId}&el=embedded&eurl=${eurl}&sts=18333`);\n  const parsedResponse = Object.fromEntries(new URLSearchParams(response.data));\n  const jsonResponse = JSON.parse(parsedResponse.player_response);\n  const {\n    playabilityStatus,\n    videoDetails,\n    streamingData\n  } = jsonResponse;\n  const videoInfo = {\n    playabilityStatus,\n    videoDetails,\n    streamingData\n  };\n  return videoInfo;\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/dev/youtube_downloader/pages/index.js"],"names":["axios","URLSearchParams","Home","getVideoInfo","videoId","videoIdRegex","eurl","test","Error","response","get","parsedResponse","Object","fromEntries","data","jsonResponse","JSON","parse","player_response","playabilityStatus","videoDetails","streamingData","videoInfo"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,KAAhC,C,CAEA;;AAEA,SAASC,IAAT,GAAgB;AACZ,sBACI;AAAA,4BACI;AAAO,MAAA,GAAG,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;AAED,eAAeC,YAAf,CAA4BC,OAA5B,EAAqC;AAEjC,QAAMC,YAAY,GAAG,WAArB;AAEA,QAAMC,IAAI,GAAI,oCAAmCF,OAAQ,EAAzD;;AAEH,MAAI,CAACC,YAAY,CAACE,IAAb,CAAkBH,OAAlB,CAAL,EAAiC;AAChC,UAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACA;;AAED,QAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,mDAAkDN,OAAQ,qBAAoBE,IAAK,YAA9F,CAAvB;AAEA,QAAMK,cAAc,GAAGC,MAAM,CAACC,WAAP,CAAmB,IAAIZ,eAAJ,CAAoBQ,QAAQ,CAACK,IAA7B,CAAnB,CAAvB;AAEA,QAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWN,cAAc,CAACO,eAA1B,CAArB;AACA,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA,YAArB;AAAmCC,IAAAA;AAAnC,MAAqDN,YAA3D;AACA,QAAMO,SAAS,GAAG;AAAEH,IAAAA,iBAAF;AAAqBC,IAAAA,YAArB;AAAmCC,IAAAA;AAAnC,GAAlB;AAEA,SAAOC,SAAP;AACA;;AAED,eAAepB,IAAf","sourcesContent":["\nimport axios from 'axios';\nimport { URLSearchParams } from 'url';\n\n// import VideoInfo from './models/VideoInfo';\n\nfunction Home() {\n    return (\n        <div>\n            <label for=\"videoId\"></label>\n            <input type=\"text\" id=\"videoId\"></input>\n        </div>\n    );\n}\n\nasync function getVideoInfo(videoId) {\n\n    const videoIdRegex = /^[\\w_-]+$/;\n    \n    const eurl = `https://youtube.googleapis.com/v/${videoId}`;\n    \n\tif (!videoIdRegex.test(videoId)) {\n\t\tthrow new Error('Invalid videoId.');\n\t}\n\n\tconst response = await axios.get(`https://www.youtube.com/get_video_info?video_id=${videoId}&el=embedded&eurl=${eurl}&sts=18333`);\n\n\tconst parsedResponse = Object.fromEntries(new URLSearchParams(response.data));\n\n\tconst jsonResponse = JSON.parse(parsedResponse.player_response);\n\tconst { playabilityStatus, videoDetails, streamingData } = jsonResponse;\n\tconst videoInfo = { playabilityStatus, videoDetails, streamingData };\n\n\treturn videoInfo;\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}