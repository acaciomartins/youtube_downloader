{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dev/youtube_downloader/pages/index.js\";\nimport axios from 'axios';\nimport { URLSearchParams } from 'url'; // import VideoInfo from './models/VideoInfo';\n\nfunction Home() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"ID do V\\xEDdeo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"videoId\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => getVideoInfo(),\n      children: \"Informa\\xE7\\xF5es do v\\xEDdeo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"json\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n\nasync function getVideoInfo() {\n  const videoIdRegex = /^[\\w_-]+$/;\n  const videoId = 'EW7m2WIvFgQ';\n  const eurl = `https://youtube.googleapis.com/v/${videoId}`;\n\n  if (!videoIdRegex.test(videoId)) {\n    throw new Error('Invalid videoId.');\n  }\n\n  const response = await axios.get(`https://www.youtube.com/get_video_info?video_id=${videoId}&el=embedded&eurl=${eurl}&sts=18333`, {\n    headers: {\n      Accept: \"application/json\"\n    }\n  });\n  console.log('aqui ', eurl);\n  response.headers['content-type'];\n  const {\n    data\n  } = response;\n  console.log('1....: ', qsToJson(data)); // const parsedResponse = response.data;\n  // const jsonResponse = JSON.parse(parsedResponse.player_response);\n\n  let painel = document.getElementById('json').innerHTML = data; // console.log('2....: ', JSON.parse(response.data));\n\n  console.log('2....: ', response); // const { playabilityStatus, videoDetails, streamingData } = jsonResponse;\n  // const videoInfo = { playabilityStatus, videoDetails, streamingData };\n  // return videoInfo;\n\n  return '';\n}\n\nfunction qsToJson(qs) {\n  var res = {};\n  var pars = qs.split('&');\n  var kv, k, v;\n  pars.map(e => {\n    console.log('eeeeeeeeeee, ', e);\n    JSON.parse(e);\n  }); // for (i in pars) {\n  //   kv = pars[i].split('=');\n  //   k = kv[0];\n  //   v = kv[1];\n  //   res[k] = decodeURIComponent(v);\n  // }\n\n  return pars;\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/dev/youtube_downloader/pages/index.js"],"names":["axios","URLSearchParams","Home","getVideoInfo","videoIdRegex","videoId","eurl","test","Error","response","get","headers","Accept","console","log","data","qsToJson","painel","document","getElementById","innerHTML","qs","res","pars","split","kv","k","v","map","e","JSON","parse"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,KAAhC,C,CAEA;;AAEA,SAASC,IAAT,GAAgB;AACZ,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAE,MAAMC,YAAY,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAM,MAAA,EAAE,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;AAED,eAAeA,YAAf,GAA8B;AAC1B,QAAMC,YAAY,GAAG,WAArB;AACA,QAAMC,OAAO,GAAG,aAAhB;AACA,QAAMC,IAAI,GAAI,oCAAmCD,OAAQ,EAAzD;;AACH,MAAI,CAACD,YAAY,CAACG,IAAb,CAAkBF,OAAlB,CAAL,EAAiC;AAC1B,UAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;AACN;;AAEE,QAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAW,mDAAkDL,OAAQ,qBAAoBC,IAAK,YAA9F,EACvB;AACIK,IAAAA,OAAO,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT;AADb,GADuB,CAAvB;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,IAArB;AACAG,EAAAA,QAAQ,CAACE,OAAT,CAAiB,cAAjB;AAEA,QAAM;AAACI,IAAAA;AAAD,MAASN,QAAf;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,QAAQ,CAACD,IAAD,CAA/B,EAhB0B,CAkB7B;AACA;;AAEG,MAAIE,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,EAAgCC,SAAhC,GAA4CL,IAAzD,CArB0B,CAsB1B;;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBL,QAAvB,EAvB0B,CAwB7B;AACA;AAEG;;AACA,SAAO,EAAP;AACH;;AAGD,SAASO,QAAT,CAAkBK,EAAlB,EAAsB;AAClB,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,IAAI,GAAGF,EAAE,CAACG,KAAH,CAAS,GAAT,CAAX;AACA,MAAIC,EAAJ,EAAQC,CAAR,EAAWC,CAAX;AAEAJ,EAAAA,IAAI,CAACK,GAAL,CAAUC,CAAD,IACT;AACIhB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Be,CAA7B;AACAC,IAAAA,IAAI,CAACC,KAAL,CAAWF,CAAX;AACH,GAJD,EALkB,CAUlB;AACA;AACA;AACA;AACA;AACA;;AACA,SAAON,IAAP;AACD;;AAEH,eAAerB,IAAf","sourcesContent":["\nimport axios from 'axios';\nimport { URLSearchParams } from 'url';\n\n// import VideoInfo from './models/VideoInfo';\n\nfunction Home() {\n    return (\n        <div>\n            <label>ID do Vídeo</label>\n            <input type=\"text\" id=\"videoId\"></input>\n            <button onClick={() => getVideoInfo()}>Informações do vídeo</button>\n            <br></br>\n            <span id='json'></span>\n        </div>\n    );\n}\n\nasync function getVideoInfo() {\n    const videoIdRegex = /^[\\w_-]+$/;\n    const videoId = 'EW7m2WIvFgQ';\n    const eurl = `https://youtube.googleapis.com/v/${videoId}`;\n\tif (!videoIdRegex.test(videoId)) {\n        throw new Error('Invalid videoId.');\n\t}\n    \n    const response = await axios.get(`https://www.youtube.com/get_video_info?video_id=${videoId}&el=embedded&eurl=${eurl}&sts=18333`, \n    {\n        headers: {Accept: \"application/json\"}\n    });\n    console.log('aqui ', eurl);\n    response.headers['content-type'];\n    \n    const {data} = response;\n    console.log('1....: ', qsToJson(data));\n\n\t// const parsedResponse = response.data;\n\t// const jsonResponse = JSON.parse(parsedResponse.player_response);\n    \n    let painel = document.getElementById('json').innerHTML = data;\n    // console.log('2....: ', JSON.parse(response.data));\n    console.log('2....: ', response);\n\t// const { playabilityStatus, videoDetails, streamingData } = jsonResponse;\n\t// const videoInfo = { playabilityStatus, videoDetails, streamingData };\n\n    // return videoInfo;\n    return '';\n}\n\n\nfunction qsToJson(qs) {\n    var res = {};\n    var pars = qs.split('&');\n    var kv, k, v;\n\n    pars.map((e) => \n    {\n        console.log('eeeeeeeeeee, ', e);\n        JSON.parse(e);\n    });\n    // for (i in pars) {\n    //   kv = pars[i].split('=');\n    //   k = kv[0];\n    //   v = kv[1];\n    //   res[k] = decodeURIComponent(v);\n    // }\n    return pars;\n  }\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}